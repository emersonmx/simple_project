snippet Inc "#include local header (inc)"
#include "${1:`!p snip.rv = snip.basename + '.h'`}"
endsnippet

snippet inc "#include <> (Inc)"
#include <${1:.h}>
endsnippet

snippet once "Include header once only guard"
#ifndef ${1:`!p
if not snip.c:
	import string
	strip_strings = snip.opt('g:vimx_strip_string_beginning_with', '')
	strip_strings = strip_strings.split(',')
	if (strip_strings):
		for s in strip_strings:
			path = re.sub(r'^' + s, '', path)

	name = re.sub(r'[^A-Za-z0-9]+','_', path).upper()
	snip.rv = ('%s_' % (name)).upper()
else:
	snip.rv = snip.c`}
#define $1

${VISUAL}${0}
#endif /* $1 */
endsnippet

snippet extc "Extern C"
#ifdef __cplusplus
extern "C" {
#endif

$0

#ifdef __cplusplus
}
#endif
endsnippet

snippet re "return"
return $0
endsnippet

snippet main "main() (main)"
int main() {
	${VISUAL}${0}
	return 0;
}
endsnippet

snippet mainn "main(int argc, char* argv[]) (main)"
int main(int argc, char* argv[]) {
	${VISUAL}${0}
	return 0;
}
endsnippet

snippet for "for loop (for)"
for (${2:i} = 0; $2 < ${1:count}; ${3:++$2}) {
	${VISUAL}${4}
}
endsnippet

snippet fori "for int loop (fori)"
${4:int} $2;
for (${2:i} = 0; $2 < ${1:count}; ${3:++$2}) {
	${VISUAL}${4}
}
endsnippet

snippet if "if .. (if)"
if (${1:/* condition */}) {
	${VISUAL}${2}
}
endsnippet

snippet ife "if .. else (ife)"
if (${1:/* condition */}) {
	${2}
} else {
	${3:/* else */}
}
endsnippet

snippet st "struct"
struct ${1:`!p snip.rv = (snip.basename or "name") + "_t"`} {
	${2:/* data */}
};
endsnippet

snippet fun "function" b
${1:void} ${2:function_name}(${3}) {
	${VISUAL}${4}
}
endsnippet
