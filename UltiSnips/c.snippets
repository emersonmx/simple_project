global !p
from snippet_helper.c import *
clean_path = strip_path(path, snip.opt(VIM_KEY_ONCE, []))
endglobal

snippet Inc "#include local header (inc)" b
#include "${1:`!p snip.rv = snip.basename + '.h'`}"
endsnippet

snippet inc "#include <> (Inc)" b
#include <${1:.h}>
endsnippet

snippet once "Include header once only guard" b
#ifndef ${1:`!p snip.rv = get_define_guard(snip, clean_path)`}
#define $1

${0:${VISUAL}}
#endif /* $1 */
endsnippet

snippet extc "Extern C" b
#ifdef __cplusplus
extern "C" {
#endif

${0:${VISUAL}}

#ifdef __cplusplus
}
#endif
endsnippet

snippet re "return" i
return ${0}
endsnippet

snippet main "main() (main)" b
int main() {
	${0:${VISUAL}}
	return 0;
}
endsnippet

snippet mainn "main(int argc, char* argv[]) (main)" b
int main(int argc, char* argv[]) {
	${0:${VISUAL}}
	return 0;
}
endsnippet

snippet for "for loop (for)" b
for (${2:i} = 0; $2 < ${1:count}; ${3:++$2}) {
	${0:${VISUAL}}
}
endsnippet

snippet fori "for int loop (fori)" b
${4:int} $2;
for (${2:i} = 0; $2 < ${1:count}; ${3:++$2}) {
	${0:${VISUAL}}
}
endsnippet

snippet if "if .. (if)" b
if (${1:/* condition */}) {
	${0:${VISUAL}}
}
endsnippet

snippet ife "if .. else (ife)" b
if (${1:/* condition */}) {
	${2}
} else {
	${3:/* else */}
}
endsnippet

snippet st "struct" b
struct ${1:`!p snip.rv = (snip.basename or "name") + "_t"`} {
	${0:${VISUAL:/* data */}}
};
endsnippet

snippet fun "function" b
${1:void} ${2:function_name}(${3}) {
	${0:${VISUAL}}
}
endsnippet
