global !p
from snippet_helper.c import *
from snippet_helper.cpp import *
default_namespace = snip.opt('g:snips_cpp_ns_default', snip.basename) or "package"
clean_path = strip_path(path, snip.opt(VIM_KEY_ONCE, []))
endglobal

snippet uns "use namespace" b
using namespace ${1:`!p snip.rv = default_namespace`};
endsnippet

snippet ns "namespace" b
`!p
write_namespaces_begin(snip, [default_namespace])
`
${0:${VISUAL}}
`!p write_namespaces_end(snip, [default_namespace])`
endsnippet

snippet nns "namespace" b
`!p
namespaces = split_namespaces_by_pathsep(clean_path)
write_namespaces_begin(snip, namespaces)
`
${0:${VISUAL}}
`!p write_namespaces_end(snip, namespaces)`
endsnippet

snippet "ns ([a-zA-Z_:][a-zA-Z0-9_:]+)" "namespace by expression ([::]ns1::ns2::ns3)" rb
`!p
namespaces = split_namespaces_by_colon(match.group(1))
write_namespaces_begin(snip, namespaces)
`
${0:${VISUAL}}
`!p write_namespaces_end(snip, namespaces)`
endsnippet

snippet cl "class .. (class)" b
class ${1:`!p snip.rv = snip.basename or "name"`} {
	${0}
};
endsnippet

snippet pub "Public" b
public:
	${0:${VISUAL}}
endsnippet

snippet pro "Protected" b
protected:
	${0:${VISUAL}}
endsnippet

snippet pri "Private" b
private:
	${0:${VISUAL}}
endsnippet

snippet vfund "virtual method declaration" b
virtual ${1:void} ${2:function_name}(${3});
endsnippet

snippet afund "abstract method declaration" b
virtual ${1:void} ${2:function_name}(${3}) = 0;
endsnippet

snippet vfun "virtual method" b
virtual ${1:void} ${2:function_name}(${3}) {
	${0:${VISUAL}}
}
endsnippet

snippet cfundf "method definition" b
${1:void} ${2:`!p snip.rv = snip.basename or "Class"`::}${3:function_name}(${4}) {
	${0:${VISUAL}}
}
endsnippet

snippet ofun "override method" b
${1:void} ${2:function_name}(${3}) override {
	${0:${VISUAL}}
}
endsnippet

snippet cexp "constexpr" b
constexpr $0
endsnippet

snippet const "const" i
const ${1:int} ${2:myConst}{${3:0}};
endsnippet

snippet m "member" b
${1:int} ${2:member}_${4:{${3}}};
endsnippet

snippet fore "for each loop" b
for (${1:auto&} ${2:value}: ${3:values}) {
	${0:${VISUAL}}
}
endsnippet

snippet sca "Static cast" i
static_cast<${1:unsigned}>(${0:${VISUAL:expr}})
endsnippet

snippet ptr "std::unique_ptr" b
std::unique_ptr<${1:int}>
endsnippet

snippet array "std::array" b
std::array<${1:int}, ${2:10}>
endsnippet

snippet mku "std::make_unique" i
std::make_unique<${1:int}>(${2});
endsnippet

# Overwrite C snippets
priority 1
snippet st "struct" b
struct ${1:`!p snip.rv = (snip.basename or "name")`} {
	${2:/* data */}
};
endsnippet

snippet enum "enum class" b
enum class ${1:MyEnum} {
	${0}
};
endsnippet

snippet fori "for int loop" b
for (${4:int} ${2:i} = 0; $2 < ${1:count}; ${3:++$2}) {
	${0:${VISUAL}}
}
endsnippet
priority 0

# Templates
snippet templ_class "Template for empty class" b
#ifndef ${1:`!p snip.rv = get_define_guard(snip, clean_path)`}
#define $1

`!p
write_namespaces_begin(snip, split_namespaces_by_pathsep(clean_path))
`
class ${2:`!p snip.rv = snip.basename or "name"`} {
	${0}
};
`!p
write_namespaces_end(snip, split_namespaces_by_pathsep(clean_path))
`
#endif /* $1 */
endsnippet
