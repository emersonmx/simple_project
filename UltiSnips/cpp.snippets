global !p
default_namespace = snip.opt('g:vmx_cpp_snippet_ns_default', snip.basename) or "package"
endglobal

snippet uns "use namespace" b
using namespace ${1:`!p snip.rv = default_namespace`};
endsnippet

snippet ns "namespace .. (namespace)" b
namespace${1/.+/ /m}${1:`!p snip.rv = default_namespace`} {
${VISUAL}${0}
}${1/.+/ \/* /m}namespace $1${1/.+/ *\//m}
endsnippet

snippet class "class .. (class)" b
class ${1:`!p snip.rv = snip.basename or "name"`} {
	${2}
};
endsnippet

snippet vfund "virtual method declaration" b
virtual ${1:void} ${2:function_name}(${3});
endsnippet

snippet afund "abstract method declaration" b
virtual ${1:void} ${2:function_name}(${3}) = 0;
endsnippet

snippet vfun "virtual method" b
virtual ${1:void} ${2:function_name}(${3}) {
	${VISUAL}${0}
}
endsnippet

snippet cfundf "method definition" b
${1:void} ${2:`!p snip.rv = snip.basename or "Class"`::}${3:function_name}(${4}) {
	${VISUAL}${0}
}
endsnippet

snippet ofun "override method" b
${1:void} ${2:function_name}(${3}) override {
	${VISUAL}${0}
}
endsnippet

snippet cexp "constexpr" b
constexpr $0
endsnippet

snippet const "const" i
const ${1:int} ${2:myConst}{${3:0}};
endsnippet

snippet m "member" b
${1:int} ${2:member}_${4:{${3}}};
endsnippet

snippet fore "for each loop" b
for (${1:auto&} ${2:value}: ${3:values}) {
	${VISUAL}${0}
}
endsnippet

snippet sca "Static cast" i
static_cast<${1:unsigned}>(${0:${VISUAL:expr}})
endsnippet

snippet ptr "std::unique_ptr" b
std::unique_ptr<${1:int}>
endsnippet

snippet array "std::array" b
std::array<${1:int}, ${2:10}>
endsnippet

snippet mku "std::make_unique" i
std::make_unique<${1:int}>(${2});
endsnippet

# Overwrite C snippets
priority 1
snippet st "struct" b
struct ${1:`!p snip.rv = (snip.basename or "name")`} {
	${2:/* data */}
};
endsnippet

snippet enum "enum class" b
enum class ${1:MyEnum} {
	${0}
};
endsnippet

snippet fori "for int loop" b
for (${4:int} ${2:i} = 0; $2 < ${1:count}; ${3:++$2}) {
	${VISUAL}${0}
}
endsnippet
priority 0
