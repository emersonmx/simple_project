priority -1
clearsnippets
priority 0

global !p
from snippet_helper.common import get_class_name
from snippet_helper.php import *
endglobal

snippet php "Php tag" w
<?php

${0:${VISUAL}}
endsnippet

snippet phps "Php open/close" w
<?php ${0:${VISUAL}} ?>
endsnippet

snippet phpe "Php echo" w
<?=${0:${VISUAL}}?>
endsnippet

snippet doc "Comments" b
/**
 * $0
 */
endsnippet

snippet if "If statement" b
if (${1:/* condition */}) {
	${2:/* code */}
}
endsnippet

snippet ife "If else statements" b
if (${1:/* condition */}) {
	${2:/* code */}
} else {
	${3:/* code */}
}
endsnippet

snippet el "Else statement" b
else {
	${1:/* code */}
}
endsnippet

snippet elif "Else if statement" b
elseif (${1:/* condition */}) {
	${2:/* code */}
}
endsnippet

snippet for "For loop" b
for (${1:$i = 0}; ${2:$i < 10}; ${3:$i++}) {
	${4:/* code */}
}
endsnippet

snippet fore "Foreach loop" b
foreach ($${1:variable} as $${3:value}) {
	${4:/* code... */}
}
endsnippet

snippet forek "Foreach key loop" b
foreach ($${1:variable} as $${2:key} => $${3:value}) {
	${4:/* code... */}
}
endsnippet

snippet wh "While loop" b
while (${1:/* condition */}) {
	${2:/* code */}
}
endsnippet

snippet dowh "Do while loop" b
do {
	${2:/* code */}
while (${1:/* condition */});
endsnippet

snippet fun "Function" b
function ${1:name}(${2:params}) {
	${3:/* code */}
}
endsnippet

snippet ec "echo" b
echo $0
endsnippet

snippet prr "Print r" b
print_r($${1:var});
endsnippet

snippet vd "Var dump" b
var_dump($${1:var});
endsnippet

snippet ret "return" b
return $1
endsnippet

snippet ns "Namespace" b
namespace $0;
endsnippet

snippet use "Use" b
use $0;
endsnippet

snippet . "$this" w
$this->
endsnippet

snippet new "New object" b
$${1:obj} = new ${2:Object}(${3:params});
endsnippet

snippet class "Class" b
class ${1:`!p snip.rv = get_class_name(snip)`} {

	$0

}
endsnippet

snippet interface "Interface" b
interface ${1:`!p snip.rv = get_class_name(snip)`} {

	$0

}
endsnippet

snippet st "Static"
static $0
endsnippet

snippet pu "Public" b
public $0
endsnippet

snippet po "Protected" b
protected $0
endsnippet

snippet pi "Private" b
private $0
endsnippet

snippet f "Field" b
${1:private} $${2:field};
endsnippet

snippet m "Method" b
${1:public} function ${2:name}(${3:$param}) {
	$4
}
endsnippet

snippet cc "Constructor call or setter body" b
$this->${1:var} = $$1;
endsnippet

snippet getter "Getter" b
public function get${2:Name}() {
	return $this->`!p snip.rv = first_lower(t[2])`;
}
endsnippet

snippet setter "Setter" b
public function set${1:Name}($`!p snip.rv = first_lower(t[1])`) {
	$this->`!p
snip.rv = first_lower(t[1])` = $`!p
snip.rv = first_lower(t[1])`;${2:
	return $this;}
}
endsnippet

snippet gs "Getter and setter" b
public function get$1() {
	return $this->`!p
field = first_lower(t[1])
field =
snip.rv = first_lower(t[1])`;
}

public function set${1:Name}($`!p snip.rv = first_lower(t[1])`) {
	$this->`!p
snip.rv = first_lower(t[1])` = $`!p
snip.rv = first_lower(t[1])`;${2:
	return $this;}
}
endsnippet

snippet clc "Class with constructor, fields, getters and setter" b
class `!p snip.rv = get_class_name(snip)` {
`!p
args = get_args(t[1])
if len(args) == 0:
	snip.rv = ""
write_fields(args, snip)
if len(args) > 0:
	snip += ""`
	public function __construct($1) { `!p
args = get_args(t[1])
write_construct_body(args, snip)
snip += "}"`$0
`!p
args = get_args(t[1])
if len(args) == 0:
	snip.rv = ""
write_getter_setter(args, snip)
snip += "}"`
endsnippet

snippet clc "Class with constructor, with field names" b
class `!p
snip.rv = get_class_name(snip)` {
`!p
args = get_args(t[1])
if len(args) == 0:
	snip.rv = ""
write_fields(args, snip)
if len(args) > 0:
	snip += ""`
	public function __construct($1) { `!p
args = get_args(t[1])
write_construct_body(args, snip)
snip += "}"`$0`!p
snip << 1
snip += "\n}"`
endsnippet

snippet clc "Class and constructor" b
class `!p
snip.rv = get_class_name(snip)` {

	public function __construct($1) {
		$0
	}

}
endsnippet

snippet cle "Class extends" b
class ${1:`!p
snip.rv = get_class_name(snip)`} ${2:extends ${3:Parent} }${4:implements ${5:Interface} }{

	$0

}
endsnippet

snippet ine "Interface extends" b
interface ${1:`!p snip.rv = get_class_name(snip)`} extends ${2:Parent} {

	$0

}
endsnippet

snippet ini "Interface implements" b
interface ${1:`!p snip.rv = get_class_name(snip)`} implements ${2:Parent} {

	$0

}
endsnippet

snippet cn "Constructor and assigments" b
public function __construct($1) { `!p
snip << 1
args = get_args(t[1])
write_construct_body(args, snip)
snip += "}"`$0
endsnippet
