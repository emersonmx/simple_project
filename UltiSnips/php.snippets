global !p

def getArgs(group):
	import re
	word = re.compile('\$\w+')
	return [i for i in word.findall(group)]

def camel(word):
	if not word: return ''
	return word[0].upper() + word[1:]

def mixedCase(word):
	if not word: return ''
	return word[0].lower() + word[1:]
endglobal

snippet php "Php tag" b
<?php

${VISUAL}$0
endsnippet

snippet phps "Php open/close" w
<?php ${VISUAL}$0 ?>
endsnippet

snippet phpe "Php echo" w
<?php echo $0 ?>
endsnippet

snippet class "Default class" b
class ${1:`!p snip.rv = snip.basename or "Untitled"`} {

	$0

}
endsnippet

snippet clc "class with constructor, fields, getters and setter" b
class `!p
snip.rv = snip.basename or "untitled"` {
`!p
args = getArgs(t[1])
snip >> 1
if len(args) == 0:
	snip.rv = ""
for i in args:
	snip += "private {};".format(i)
if len(args) > 0:
	snip += ""`
	public function __construct($1) { `!p
args = getArgs(t[1])
snip >> 2
for i in args:
	snip += "$this->{} = {};".format(i[1:], i)
snip << 1
snip += "}"`$0
`!p
args = getArgs(t[1])
if len(args) == 0:
	snip.rv = ""
snip >> 1
for i in args:
	snip += "public function get{}() {{".format(camel(i[1:]))
	snip >> 1
	snip += "return $this->{};".format(i[1:])
	snip << 1
	snip += "}\n"

	snip += "public function set{}({}) {{".format(camel(i[1:]), i)
	snip >> 1
	snip += "$this->{} = {};".format(i[1:], i)
	snip << 1
	snip += "}\n"
snip << 1
snip += "}"`
endsnippet

snippet clc "class with constructor, with field names" b
class `!p
snip.rv = snip.basename or "untitled"` {
`!p
args = getArgs(t[1])
snip >> 1
if len(args) == 0:
	snip.rv = ""
for i in args:
	snip += "private {};".format(i)
if len(args) > 0:
	snip += ""`
	public function __construct($1) { `!p
args = getArgs(t[1])
snip >> 2
for i in args:
	snip += "$this->{} = {};".format(i[1:], i)
snip << 1
snip += "}\n"
snip << 1
snip += "}"`$0
endsnippet

snippet clc "class and constructor" b
class `!p
snip.rv = snip.basename or "untitled"` {

	public function __construct($1) {
		$0
	}

}
endsnippet

snippet cle "class extends" b
class ${1:`!p
snip.rv = snip.basename or "untitled"`} ${2:extends ${3:Parent} }${4:implements ${5:Interface} }{

	$0

}
endsnippet

snippet inn "interface" b
interface ${1:`!p snip.rv = snip.basename or "untitled"`} {

	$0

}
endsnippet

snippet ine "interface" b
interface ${1:`!p snip.rv = snip.basename or "untitled"`} extends ${2:Parent} {

	$0

}
endsnippet

snippet ini "interface" b
interface ${1:`!p snip.rv = snip.basename or "untitled"`} implements ${2:Parent} {

	$0

}
endsnippet

snippet f "field" b
${1:private} $${2:field};
endsnippet

snippet cc "constructor call or setter body"
$this->${1:var} = $$1;
endsnippet

snippet cn "Constructor" b
${1:public} function __construct(${2:}) {
	$0
}
endsnippet

snippet cn "constructor, \w fields + assigments" b
`!p
args = getArgs(t[1])
snip >> 1`
public function __construct($1) { `!p
args = getArgs(t[1])
snip >> 1
for i in args:
	snip += "$this->{} = {};".format(i[1:], i)
snip << 1
snip += "}"`$0
endsnippet

snippet getter "getter" b
public function get${2:Name}() {
	return $this->`!p snip.rv = mixedCase(t[2])`;
}
endsnippet

snippet setter "setter" b
public function set${1:Name}($`!p snip.rv = mixedCase(t[1])`) {
	$this->`!p snip.rv = mixedCase(t[1])` = $`!p snip.rv = mixedCase(t[1])`;${2:
	return $this;}
}
endsnippet

snippet gs "getter and setter" b
public function get$1() {
	return $this->`!p snip.rv = mixedCase(t[1])`;
}

public function set${1:Name}($`!p snip.rv = mixedCase(t[1])`) {
	$this->`!p snip.rv = mixedCase(t[1])` = $`!p snip.rv = mixedCase(t[1])`;${2:
	return $this;}
}
endsnippet

snippet pub "Public function" b
public function ${1:name}(${2:$param}) {
	${VISUAL}${3:return null;}
}$0
endsnippet

snippet pro "Protected function" b
protected function ${1:name}(${2:$param}) {
	${VISUAL}${3:return null;}
}$0
endsnippet

snippet pri "Private function" b
private function ${1:name}(${2:$param}) {
	${VISUAL}${3:return null;}
}$0
endsnippet

snippet pubs "Public static function" b
public static function ${1:name}(${2:$param}) {
	${VISUAL}${3:return null;}
}$0
endsnippet

snippet pros "Protected static function" b
protected static function ${1:name}(${2:$param}) {
	${VISUAL}${3:return null;}
}$0
endsnippet

snippet pris "Private static function" b
private static function ${1:name}(${2:$param}) {
	${VISUAL}${3:return null;}
}$0
endsnippet

snippet fu "Function snip" b
function ${1:name}(${2:$param}) {
	${VISUAL}${3:return null;}
}$0
endsnippet

snippet foreachk "foreachk"
foreach ($${1:variable} as $${2:key} => $${3:value}) {
	${4:// code...}
}
endsnippet

snippet fore "Foreach loop"
foreach ($${1:variable} as $${3:value}) {
	${VISUAL}${4}
}$0
endsnippet

snippet ret "return" b
return $1
endsnippet
