##########
# COMMON #
##########

global !p

SINGLE_QUOTES = "'"
DOUBLE_QUOTES = '"'


class Arg(object):
	def __init__(self, arg):
		self.arg = arg
		self.name = arg.split('=')[0].strip()

	def __str__(self):
		return self.name

	def __unicode__(self):
		return self.name

	def is_kwarg(self):
		return '=' in self.arg


def get_args(arglist):
	args = [Arg(arg) for arg in arglist.split(',') if arg]
	args = [arg for arg in args if arg.name != 'self']

	return args


def get_quoting_style(snip):
	style = snip.opt("g:ultisnips_python_quoting_style", "double")
	if style == 'single':
		return SINGLE_QUOTES
	return DOUBLE_QUOTES

def triple_quotes(snip):
	return get_quoting_style(snip) * 3

def triple_quotes_handle_trailing(snip, quoting_style):
	"""
	Generate triple quoted strings and handle any trailing quote char,
	which might be there from some autoclose/autopair plugin,
	i.e. when expanding ``"|"``.
	"""
	if not snip.c:
		# Do this only once, otherwise the following error would happen:
		# RuntimeError: The snippets content did not converge: â€¦
		_, col = vim.current.window.cursor
		line = vim.current.line

		# Handle already existing quote chars after the trigger.
		_ret = quoting_style * 3
		while True:
			try:
				nextc = line[col]
			except IndexError:
				break
			if nextc == quoting_style and len(_ret):
				_ret = _ret[1:]
				col = col+1
			else:
				break
		snip.rv = _ret
	else:
		snip.rv = snip.c


def write_init_body(args, parents, snip):
	parents = [p.strip() for p in parents.split(",")]
	parents = [p for p in parents if p != 'object' and p != ""]

	if len(parents) == 1:
		snip += "super().__init__()"
	elif len(parents) > 1:
		for p in parents:
			snip += "super(" + p + ", self).__init__()"

	if parents:
		snip.rv += '\n' + snip.mkline('', indent='')

	for arg in args:
		snip += "self.%s = %s" % (arg, arg)


def write_slots_args(args, snip):
	args = ['"%s"' % arg for arg in args]
	snip += '__slots__ = (%s,)' % ', '.join(args)


endglobal

#############
#  Commons  #
#############

#! header
snippet #! "Shebang header for python scripts" b
#!/usr/bin/env python
# encoding: utf-8
$0
endsnippet

snippet ifmain "ifmain" b
if __name__ == `!p snip.rv = get_quoting_style(snip)`__main__`!p snip.rv = get_quoting_style(snip)`:
	${1:main()}$0
endsnippet

snippet for "for loop" b
for ${1:item} in ${2:iterable}:
	${3:pass}
endsnippet

########################################
# Class & Special Method Name Snippets #
########################################

snippet class "class" b
class ${1:MyClass}(${2:object}):

	def __init__(`!p snip.rv = 'self' + (", " if len(t[4]) else "")`${4:arg1}):`!p
snip.rv = ""
snip >> 2

args = get_args(t[4])
write_init_body(args, t[2], snip)`
		$0
endsnippet


snippet slotclass "class" b
class ${1:MyClass}(${2:object}):
	`!p
snip >> 1
args = get_args(t[4])
write_slots_args(args, snip)
`

	def __init__(`!p snip.rv = 'self' + (", " if len(t[4]) else "")`${4:arg1}):`!p
snip.rv = ""
snip >> 2

args = get_args(t[4])
write_init_body(args, t[2], snip)
`
		$0
endsnippet


snippet def "function" b
def ${1:function}(`!p
if snip.indent:
	snip.rv = 'self' + (", " if len(t[2]) else "")`${2:arg1}):
	${0:pass}
endsnippet


snippet defc "class method" b
@classmethod
def ${1:function}(`!p
if snip.indent:
	snip.rv = 'cls' + (", " if len(t[2]) else "")`${2:arg1}):
	${0:pass}
endsnippet


snippet defs "static method" b
@staticmethod
def ${1:function}(${2:arg1}):
	${0:pass}
endsnippet


##############
# PROPERTIES #
##############
snippet roprop "Read Only Property" b
@property
def ${1:name}(self):
	${2:return self._$1}$0
endsnippet

snippet rwprop "Read write property" b
@property
def ${1:name}(self):
	${2:return self._$1}

@$1.setter
def $1(self, ${3:$1}):
	${4:self._$1 = $3}
endsnippet


###########
#  Tests  #
###########

snippet testcase "pyunit testcase" b
class ${1:Class}TestCase(${2:unittest.TestCase}):

	def setUp(self):
		${4:pass}

	def tearDown(self):
		${5:pass}

	def test_${6:name}(self):
		${7:pass}
endsnippet


#############
#  Commons  #
#############

snippet pr "Print" b
print($0)
endsnippet

snippet " "triple quoted string (double quotes)" b
""" ${1:doc} `!p triple_quotes_handle_trailing(snip, '"')`
endsnippet

snippet ' "triple quoted string (single quotes)" b
''' ${1:doc} `!p triple_quotes_handle_trailing(snip, "'")`
endsnippet

snippet doc "doc block (triple quotes)"
`!p snip.rv = triple_quotes(snip)` ${1:doc} `!p snip.rv = triple_quotes(snip)`
endsnippet

snippet ret "return" b
return $0
endsnippet

clearsnippets _
snippet __ "Magic" b
__${1:init}__
endsnippet

# vim:ft=snippets:
