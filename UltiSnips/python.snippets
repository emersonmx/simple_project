priority -1
clearsnippets
priority 0

global !p
from snippet_helper.common import get_class_name
from snippet_helper.python import *
endglobal

snippet #! "Shebang header for python scripts" b
#!/usr/bin/env python
# encoding: utf-8

$0
endsnippet

snippet doc "Doc" b
"""$0"""
endsnippet

snippet imp "Import" b
import ${0:sys}
endsnippet

snippet from "from ... import ..." b
from ${1:package} import ${0:module}
endsnippet

snippet if "If statement" b
if ${1:True}:
	${2:pass}
endsnippet

snippet ife "If else statement" b
if ${1:True}:
	${2:pass}
else:
	${3:pass}
endsnippet

snippet el "Else statement" b
else:
	${1:pass}
endsnippet

snippet elif "Else if statement" b
elif ${1:True}:
	${2:pass}
endsnippet

snippet for "For loop" b
for ${1:it} in ${2:iterable}:
	${3:pass}
endsnippet

snippet wh "While loop" b
while ${1:True}:
	${2:pass}
endsnippet

snippet dowh "Do while loop" b
while True:
	${2:pass}
	if ${1:True}:
		break
endsnippet

snippet with "With" b
	with ${1:expr} as ${2:var}:
		${3:pass}
endsnippet

snippet def "function" b
def ${1:function}(`!p
if snip.indent:
	snip.rv = 'self' + (", " if len(t[2]) else "")`${2:arg}):
	${0:pass}
endsnippet

snippet pr "Print" b
print($0)
endsnippet

snippet re "return" b
return $0
endsnippet

snippet ifmain "ifmain" b
def ${1:main}():
	${0:pass}

if __name__ == "__main__":
	$1()
endsnippet

snippet mgk "Magic" w
__${1:init}__
endsnippet

snippet /(^|(?<=\W))\./ "self." r
self.
endsnippet

snippet class "Class" b
class ${1:`!p snip.rv = get_class_name(snip)`}(${2:object}):

	def __init__(`!p
snip.rv = "self" + (", " if len(t[4]) else "")`${4:arg}):`!p
snip >> 2
args = get_args(t[4])
write_init_body(args, t[1], snip)`
endsnippet

snippet abstract "Abstract class" b
class ${1:`!p snip.rv = get_class_name(snip)`}(object):

	__metaclass__ = ABCMeta
endsnippet

snippet init "Contructor" b
def __init__(`!p
snip.rv = "self" + (", " if len(t[1]) else "")`${1:arg}):`!p
snip >> 1
args = get_args(t[1])
write_fields(args, snip)`
endsnippet

snippet cc "Constructor call or setter body" b
self.${1:var} = $1
endsnippet

snippet super "Super call" b
super(${2:${1:SuperClass}, self}).${3:__init__}(${4:args})
endsnippet

snippet defa "Abstract method" b
@abstractmethod
def ${1:function}(`!p
if snip.indent:
	snip.rv = 'self' + (", " if len(t[2]) else "")`${2:arg}):
	${3:pass}
endsnippet

snippet defc "Class method" b
@classmethod
def ${1:function}(`!p
if snip.indent:
	snip.rv = 'cls' + (", " if len(t[2]) else "")`${2:arg}):
	${0:pass}
endsnippet

snippet defs "Static method" b
@staticmethod
def ${1:function}(${2:arg}):
	${0:pass}
endsnippet

snippet roprop "Read Only Property" b
@property
def ${1:name}(self):
	${2:return self._$1}$0
endsnippet

snippet rwprop "Read write property" b
@property
def ${1:name}(self):
	${2:return self._$1}

@$1.setter
def $1(self, ${3:$1}):
	${4:self._$1 = $3}
endsnippet

snippet glog "Logger" b
	import logging
	logger = logging.getLogger(${1:__name__})
endsnippet

snippet le "Log error" b
	logger.error(${1:msg})
endsnippet

snippet lg "Log debug" b
	logger.debug(${1:msg})
endsnippet

snippet lw "Log warning" b
	logger.warning(${1:msg})
endsnippet

snippet lc "Log critical" b
	logger.critical(${1:msg})
endsnippet

snippet li "Log info" b
	logger.info(${1:msg})
endsnippet
