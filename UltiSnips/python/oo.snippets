global !p
from snippet_helper.common import get_class_name
from snippet_helper.python import *
endglobal

snippet /(^|(?<=\W))\./ "self." r
self.
endsnippet

snippet class "Class" b
class ${1:`!p snip.rv = get_class_name(snip)`}(${2:object}):

	def __init__(`!p
snip.rv = "self" + (", " if len(t[4]) else "")`${4:arg}):`!p
snip >> 2
args = get_args(t[4])
parents = get_args(t[2])
write_init_body(args, parents, snip)`
endsnippet

snippet interface "Interface" b
class ${1:`!p snip.rv = get_class_name(snip)`}(object):

	__metaclass__ = ABCMeta
endsnippet

snippet init "Contructor" b
def __init__(`!p
snip.rv = "self" + (", " if len(t[1]) else "")`${1:arg}):`!p
snip >> 1
args = get_args(t[1])
write_fields(args, snip)`
endsnippet

snippet cc "Constructor call or setter body" b
self.${1:var} = $1
endsnippet

snippet super "Super call" b
super(${2:${1:SuperClass}, self}).${3:__init__}(${4:args})
endsnippet

snippet defa "Interface method" b
@abstractmethod
def ${1:function}(`!p
if snip.indent:
	snip.rv = 'self' + (", " if len(t[2]) else "")`${2:arg}):
	${3:pass}
endsnippet

snippet defc "Class method" b
@classmethod
def ${1:function}(`!p
if snip.indent:
	snip.rv = 'cls' + (", " if len(t[2]) else "")`${2:arg}):
	${0:pass}
endsnippet

snippet defs "Static method" b
@staticmethod
def ${1:function}(${2:arg}):
	${0:pass}
endsnippet

snippet roprop "Read Only Property" b
@property
def ${1:name}(self):
	${2:return self._$1}$0
endsnippet

snippet rwprop "Read write property" b
@property
def ${1:name}(self):
	${2:return self._$1}

@$1.setter
def $1(self, ${3:$1}):
	${4:self._$1 = $3}
endsnippet
